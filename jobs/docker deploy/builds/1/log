Started by an SCM change
Building in workspace /var/lib/jenkins/workspace/docker deploy
Cloning the remote Git repository
Cloning repository https://github.com/amritasengar/dockerfile.git
 > git init /var/lib/jenkins/workspace/docker deploy # timeout=10
Fetching upstream changes from https://github.com/amritasengar/dockerfile.git
 > git --version # timeout=10
using GIT_ASKPASS to set credentials github
 > git fetch --tags --progress https://github.com/amritasengar/dockerfile.git +refs/heads/*:refs/remotes/origin/*
 > git config remote.origin.url https://github.com/amritasengar/dockerfile.git # timeout=10
 > git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git config remote.origin.url https://github.com/amritasengar/dockerfile.git # timeout=10
Fetching upstream changes from https://github.com/amritasengar/dockerfile.git
using GIT_ASKPASS to set credentials github
 > git fetch --tags --progress https://github.com/amritasengar/dockerfile.git +refs/heads/*:refs/remotes/origin/*
 > git rev-parse refs/remotes/origin/master^{commit} # timeout=10
 > git rev-parse refs/remotes/origin/origin/master^{commit} # timeout=10
Checking out Revision fad88660140f528a3257604613668a285526d405 (refs/remotes/origin/master)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f fad88660140f528a3257604613668a285526d405
Commit message: "Update ems-k8s-deployment.yaml"
First time build. Skipping changelog.
Copied 1 artifact from "[8mha:////4BrMAuZiZHfQh+v0Ag61UCBxf6Hbhpw5J+4rB6PihmrWAAAAkx+LCAAAAAAAAP9b85aBtbiIQSajNKU4P08vOT+vOD8nVc+jsiC1KCczL9svvyTVzHb1RttJBUeZGJg8GdhyUvPSSzJ8GJhLi3JKGIR8shLLEvVzEvPS9YNLijLz0q0rihik0IxzhtAgwxgggJGJgaGiAMjgL2EQ1c/KT9L3tnD1DdZNKs3MSdEF8QF1mwp9mgAAAA==[0mK8EMS-build-job" build number [8mha:////4A9Q5oIWkHfrnp6HVO8JiAq+Up1DUoxcgebaATXDmmYmAAAAlh+LCAAAAAAAAP9b85aBtbiIQSajNKU4P08vOT+vOD8nVc+jsiC1KCczL9svvyTVzHb1RttJBUeZGJg8GdhyUvPSSzJ8GJhLi3JKGIR8shLLEvVzEvPS9YNLijLz0q0rihik0IxzhtAgwxgggJGJgaGiAMhgKmGQ0M/KT9L3tnD1DdZNKs3MSdEF8c0s9AFYeUM7nQAAAA==[0m68
[docker deploy] $ docker build -t amritase/emsrepo:1 --pull=true "/var/lib/jenkins/workspace/docker deploy"
Sending build context to Docker daemon   54.3MB
Step 1/12 : FROM ubuntu:14.04
14.04: Pulling from library/ubuntu
Digest: sha256:b8855dc848e2622653ab557d1ce2f4c34218a9380cceaa51ced85c5f3c8eb201
Status: Image is up to date for ubuntu:14.04
 ---> 8cef1fa16c77
Step 2/12 : LABEL Description="This image is used for github->circleci->dockerhub->tutum->aws" Version="1.0"
 ---> Using cache
 ---> 3445723c5b29
Step 3/12 : MAINTAINER pushpendra
 ---> Using cache
 ---> 805d44fe20b4
Step 4/12 : RUN apt-get update
 ---> Using cache
 ---> 38ff8899e877
Step 5/12 : RUN sudo apt-get install -y openjdk-7-jdk
 ---> Using cache
 ---> c0633a54d6f5
Step 6/12 : RUN sudo apt-get install -y tomcat7
 ---> Using cache
 ---> e66a5829e732
Step 7/12 : ENV CATALINA_HOME /usr/share/tomcat7/
 ---> Using cache
 ---> ca195f7e85ac
Step 8/12 : ENV CATALINA_BASE /var/lib/tomcat7/
 ---> Using cache
 ---> ccb9e9c58187
Step 9/12 : ENV PATH $CATALINA_HOME/bin:$PATH
 ---> Using cache
 ---> 6d46348aed8e
Step 10/12 : COPY ./target/*.war /var/lib/tomcat7/webapps/EmployeeApplication.war
 ---> Using cache
 ---> bce5f52fd350
Step 11/12 : EXPOSE 8080
 ---> Using cache
 ---> 04d91c0fbe5c
Step 12/12 : CMD ["catalina.sh", "run"]
 ---> Using cache
 ---> 18eda8cbe586
Successfully built 18eda8cbe586
Successfully tagged amritase/emsrepo:1
[docker deploy] $ docker tag 18eda8cbe586 amritase/emsrepo:latest
[docker deploy] $ docker inspect 18eda8cbe586
[docker deploy] $ docker push amritase/emsrepo:1
The push refers to repository [docker.io/amritase/emsrepo]
f6505cb9bd40: Preparing
70c993c6f3a2: Preparing
2301fa78529e: Preparing
1eaf5c5317cd: Preparing
4622c8e1bdc0: Preparing
b33859b66bfd: Preparing
14fa4a9494bf: Preparing
0c3819952093: Preparing
05b0f7f2a817: Preparing
b33859b66bfd: Waiting
14fa4a9494bf: Waiting
0c3819952093: Waiting
05b0f7f2a817: Waiting
1eaf5c5317cd: Layer already exists
4622c8e1bdc0: Layer already exists
70c993c6f3a2: Layer already exists
2301fa78529e: Layer already exists
f6505cb9bd40: Layer already exists
b33859b66bfd: Layer already exists
0c3819952093: Layer already exists
14fa4a9494bf: Layer already exists
05b0f7f2a817: Layer already exists
1: digest: sha256:2bf2e39d09e4ba65dcd0e18b9cd8ee055de202362f9ebbdba7e5dc04aec9d03e size: 2207
[docker deploy] $ docker push amritase/emsrepo:latest
The push refers to repository [docker.io/amritase/emsrepo]
f6505cb9bd40: Preparing
70c993c6f3a2: Preparing
2301fa78529e: Preparing
1eaf5c5317cd: Preparing
4622c8e1bdc0: Preparing
b33859b66bfd: Preparing
14fa4a9494bf: Preparing
0c3819952093: Preparing
05b0f7f2a817: Preparing
b33859b66bfd: Waiting
14fa4a9494bf: Waiting
0c3819952093: Waiting
05b0f7f2a817: Waiting
1eaf5c5317cd: Layer already exists
70c993c6f3a2: Layer already exists
4622c8e1bdc0: Layer already exists
f6505cb9bd40: Layer already exists
2301fa78529e: Layer already exists
14fa4a9494bf: Layer already exists
0c3819952093: Layer already exists
b33859b66bfd: Layer already exists
05b0f7f2a817: Layer already exists
latest: digest: sha256:2bf2e39d09e4ba65dcd0e18b9cd8ee055de202362f9ebbdba7e5dc04aec9d03e size: 2207
[docker deploy] $ /bin/sh -xe /tmp/jenkins2359938629974965846.sh
+ docker build -t amritase/mysql --file Dockerfile1 .
Sending build context to Docker daemon   54.3MB
Step 1/11 : FROM oraclelinux:7-slim
 ---> c94cc930790a
Step 2/11 : ARG PACKAGE_URL=https://repo.mysql.com/yum/mysql-8.0-community/docker/x86_64/mysql-community-server-minimal-8.0.11-1.el7.x86_64.rpm
 ---> Using cache
 ---> 1dd3e4818967
Step 3/11 : ARG PACKAGE_URL_SHELL=https://repo.mysql.com/yum/mysql-tools-community/el/7/x86_64/mysql-shell-8.0.11-1.el7.x86_64.rpm
 ---> Using cache
 ---> 17a85b04855b
Step 4/11 : RUN rpmkeys --import https://repo.mysql.com/RPM-GPG-KEY-mysql   && yum install -y $PACKAGE_URL $PACKAGE_URL_SHELL libpwquality   && yum clean all   && mkdir /docker-entrypoint-initdb.d
 ---> Using cache
 ---> ff56b488a082
Step 5/11 : VOLUME /var/lib/mysql
 ---> Using cache
 ---> d668103ac7b3
Step 6/11 : COPY docker-entrypoint.sh /entrypoint.sh
 ---> Using cache
 ---> e19e8f2af8a8
Step 7/11 : COPY healthcheck.sh /healthcheck.sh
 ---> Using cache
 ---> d8dc11b1e367
Step 8/11 : ENTRYPOINT ["/entrypoint.sh"]
 ---> Using cache
 ---> f3ce6ba8b3fa
Step 9/11 : HEALTHCHECK CMD /healthcheck.sh
 ---> Using cache
 ---> 19ad716a4dcb
Step 10/11 : EXPOSE 3306 33060
 ---> Using cache
 ---> d5269bb76d4b
Step 11/11 : CMD ["mysqld"]
 ---> Using cache
 ---> e10db589a89a
Successfully built e10db589a89a
Successfully tagged amritase/mysql:latest
+ docker push amritase/mysql
The push refers to repository [docker.io/amritase/mysql]
ee8b1fbe94da: Preparing
1de14b3f5b4c: Preparing
f979ed08be13: Preparing
401b941ef605: Preparing
1de14b3f5b4c: Layer already exists
ee8b1fbe94da: Layer already exists
401b941ef605: Layer already exists
f979ed08be13: Layer already exists
latest: digest: sha256:7e0a97e11d64aca49ca6a6fb7cd7027fded42a172424f9e5dcaa9e3fc7e652d4 size: 1156
Finished: SUCCESS
